//如果一个运算子是字符串，另一个运算子是非字符串，此时非字符串会转成字符串再连接
console.log(1+'a');
//重载：加法运算符在运算时决定执行相加还是连接，从左到右的运算次序不同的字符串位置导致不同结果，如下
console.log('3'+4+5);
console.log(3+4+'5');
//当然，重载只有在加法运算符会发生

//若运算子为对象，需先转为原始类型的值再相加
//一般对象先调用valueOf方法再调用toString方法
//可自己定义规则获取想要的值
var obj={ p:12 }
console.log(obj+12);

var obj={
    valueOf:function(){
        return 12;
    }
}
console.log(obj+12);

var obj={
    toString:function(){
        return '旺仔牛奶';
    }
}
console.log(obj+12);

//在使用余数运算符时先使用绝对值函数避免正负值出问题
function isOdd(n){
    return Math.abs(n%2)===1;
}
console.log(isOdd(-5));

//"+"也是数值运算符，可将任何值转为数值（相当于number函数
//"-"也有这种功能只是正负值相反
//数值运算符号和负数值运算符，都会返回一个新的值，而不会改变原始变量的值

//在对象的比较中，严格运算符"==="比较的是地址
//由于变量声明后默认值是undefined，因此两个只声明未赋值的变量是相等的
//“严格不相等运算符”（!==），它的算法就是先求严格相等运算符的结果，然后返回相反值

//“&&”且运算符，如果第一个运算子的布尔值为true，则返回第二个运算子的值（注意是值，不是布尔值）
//如果第一个运算子的布尔值为false，则直接返回第一个运算子的值，且不再对第二个运算子求值
//这种机制成为短路，可代替if
var x=1;
console.log((1-1)&&(x+=1));
console.log(x);
//if(i){return 1;} 等价于 i && return 1;
var i=1;
console.log(i && 114514);
//且运算符可以多个连用，这时返回第一个布尔值为false的表达式的值
//如果所有表达式的布尔值都为true，则返回最后一个表达式的值

//"||"或运算符与且运算符相反
//或运算符可用于给变量设置默认值
function ha(n){
    n = n || '';
}
var n;
console.log(n);

//三元运算符
console.log(1?'true':'false');
console.log(0?'true':'false');

//二进制否运算符：～3，即加1再取赋值，得到-4
//二进制异或运算符：0^3，即比较每一位二进制位，不同返回1，相同返回0，得到11即3
//将两个数进行3次异或运算可将两个数值互换
//二进制左移运算符：4<<1,即4*（2**1）=8，1就是2的指数
//二进制右移运算符：4>>1,即4/（2**1）=2，1就是2的指数
//头部补零右移运算符：4>>>1，即2，若参数为正那么与右移运算符无差，若为负
//将参数的32位二进制头部补0，向右移动符号右边的位数
//这个运算实际上将一个值转为32位无符号整数
//查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符

//void运算符：用于超链接中防止页面跳转，例如点击提交表单，但不需要跳转页面
//  <a href="javascript: void(document.form.submit())">
//  提交
//  </a>